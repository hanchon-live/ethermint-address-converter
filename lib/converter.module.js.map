{"version":3,"file":"converter.module.js","sources":["../src/converter.ts"],"sourcesContent":["import {\n  isValidChecksumAddress,\n  stripHexPrefix,\n  toChecksumAddress\n} from 'crypto-addr-codec';\n\nimport {\n  decode,\n  encode,\n  fromWords,\n  toWords,\n} from 'bech32';\n\nfunction makeChecksummedHexEncoder(chainId?: number) {\n  return (data: Buffer) => toChecksumAddress(data.toString('hex'), chainId || null);\n}\n\nfunction makeChecksummedHexDecoder(chainId?: number) {\n  return (data: string) => {\n    const stripped = stripHexPrefix(data);\n    if (\n      !isValidChecksumAddress(data, chainId || null) &&\n      stripped !== stripped.toLowerCase() &&\n      stripped !== stripped.toUpperCase()\n    ) {\n      throw Error('Invalid address checksum');\n    }\n    return Buffer.from(stripHexPrefix(data), 'hex');\n  };\n}\n\nconst hexChecksumChain = (name: string, chainId?: number) => ({\n  decoder: makeChecksummedHexDecoder(chainId),\n  encoder: makeChecksummedHexEncoder(chainId),\n  name,\n});\n\nexport const ETH = hexChecksumChain('ETH');\n\nfunction makeBech32Encoder(prefix: string) {\n  return (data: Buffer) => encode(prefix, toWords(data));\n}\n\nfunction makeBech32Decoder(currentPrefix: string) {\n  return (data: string) => {\n    const { prefix, words } = decode(data);\n    if (prefix !== currentPrefix) {\n      throw Error('Unrecognised address format');\n    }\n    return Buffer.from(fromWords(words));\n  };\n}\n\n\nconst bech32Chain = (name: string, prefix: string) => ({\n  decoder: makeBech32Decoder(prefix),\n  encoder: makeBech32Encoder(prefix),\n  name,\n});\n\nexport const ETHERMINT = bech32Chain('ETHERMINT', 'ethm');\n\nexport const ethToEthermint = (ethAddress: string) => {\n  let data = ETH.decoder(ethAddress);\n  return ETHERMINT.encoder(data);\n};\n\nexport const ethermintToEth = (ethermintAddress: string) => {\n  let data = ETHERMINT.decoder(ethermintAddress);\n  return ETH.encoder(data);\n};\n\n\nexport const EVMOS = bech32Chain('EVMOS', 'evmos');\n\nexport const ethToEvmos = (ethAddress:string) => {\n  let data = ETH.decoder(ethAddress);\n  return EVMOS.encoder(data);\n}\n\nexport const evmosToEth = (evmosAddress: string) => {\n  let data = EVMOS.decoder(evmosAddress);\n  return ETH.encoder(data);\n};\n\nexport const REBUS = bech32Chain('REBUS', 'rebus');\n\nexport const ethToRebus = (ethAddress:string) => {\n  let data = ETH.decoder(ethAddress);\n  return REBUS.encoder(data);\n}\n\nexport const rebusToEth = (evmosAddress: string) => {\n  let data = REBUS.decoder(evmosAddress);\n  return ETH.encoder(data);\n};"],"names":["ETH","decoder","data","stripped","stripHexPrefix","isValidChecksumAddress","toLowerCase","toUpperCase","Error","Buffer","from","encoder","toChecksumAddress","toString","name","makeBech32Encoder","prefix","encode","toWords","bech32Chain","currentPrefix","words","decode","fromWords","ETHERMINT","ethToEthermint","ethAddress","ethermintToEth","ethermintAddress","EVMOS","ethToEvmos","evmosToEth","evmosAddress","REBUS","ethToRebus","rebusToEth"],"mappings":"8KA+BA,MAMaA,GALXC,QAdQC,IACN,MAAMC,EAAWC,EAAeF,GAChC,IACGG,EAAuBH,EAAiB,OACzCC,IAAaA,EAASG,eACtBH,IAAaA,EAASI,cAEtB,MAAMC,MAAM,4BAEd,OAAOC,OAAOC,KAAKN,EAAeF,GAAO,QAM3CS,QAnBQT,GAAiBU,EAAkBV,EAAKW,SAAS,OAAmB,MAoB5EC,KAGkC,OAEpC,SAASC,EAAkBC,GACzB,OAAQd,GAAiBe,EAAOD,EAAQE,EAAQhB,IAclD,MAAMiB,EAAc,CAACL,EAAcE,YACjCf,SAZyBmB,EAYEJ,EAXnBd,IACN,MAAMc,OAAEA,EAAFK,MAAUA,GAAUC,EAAOpB,GACjC,GAAIc,IAAWI,EACb,MAAMZ,MAAM,+BAEd,OAAOC,OAAOC,KAAKa,EAAUF,MAO/BV,QAASI,EAAkBC,GAC3BF,KAAAA,GAdF,IAA2BM,GAiBdI,EAAYL,EAAY,YAAa,QAErCM,EAAkBC,IAC7B,IAAIxB,EAAOF,EAAIC,QAAQyB,GACvB,OAAOF,EAAUb,QAAQT,IAGdyB,EAAkBC,IAC7B,IAAI1B,EAAOsB,EAAUvB,QAAQ2B,GAC7B,OAAO5B,EAAIW,QAAQT,IAIR2B,EAAQV,EAAY,QAAS,SAE7BW,EAAcJ,IACzB,IAAIxB,EAAOF,EAAIC,QAAQyB,GACvB,OAAOG,EAAMlB,QAAQT,IAGV6B,EAAcC,IACzB,IAAI9B,EAAO2B,EAAM5B,QAAQ+B,GACzB,OAAOhC,EAAIW,QAAQT,IAGR+B,EAAQd,EAAY,QAAS,SAE7Be,EAAcR,IACzB,IAAIxB,EAAOF,EAAIC,QAAQyB,GACvB,OAAOO,EAAMtB,QAAQT,IAGViC,EAAcH,IACzB,IAAI9B,EAAO+B,EAAMhC,QAAQ+B,GACzB,OAAOhC,EAAIW,QAAQT"}